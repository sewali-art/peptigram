{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPkgmyXa+bnce1gLLnxpvK1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "1f2cbe88fdf746af9e7d19dba7bdd977": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TabModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TabModel",
            "_titles": {
              "0": "Peptigram Analysis"
            },
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TabView",
            "box_style": "",
            "children": [
              "IPY_MODEL_485c8727b9204011af689826c06fafa6"
            ],
            "layout": "IPY_MODEL_123858288d874f60971fa94a74af8049",
            "selected_index": 0
          }
        },
        "485c8727b9204011af689826c06fafa6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f8f5e696613b4360887116ab9577883a",
              "IPY_MODEL_f89871455c13436080fb6f7ef31f5d38",
              "IPY_MODEL_ddaec44ba0ad44828e63900cd2baeff8",
              "IPY_MODEL_246038462e24467da1094fd6f33c975a",
              "IPY_MODEL_3db14ac02a5e4116b03a12808adea232",
              "IPY_MODEL_34b6669b2e2d46389435e63dbf519b05"
            ],
            "layout": "IPY_MODEL_9e07fa4b34ef4c3f9983b50439de6dc0"
          }
        },
        "123858288d874f60971fa94a74af8049": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f8f5e696613b4360887116ab9577883a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0d315b8a40264cdea729e245f9754827",
            "placeholder": "​",
            "style": "IPY_MODEL_d1e3a9a87f5a4a18a5abe2eaec3fe741",
            "value": "<h3>FASTA Input</h3>"
          }
        },
        "f89871455c13436080fb6f7ef31f5d38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_6478b5f4a0144952b6bf10e022809dad",
            "placeholder": "Paste FASTA content here...",
            "rows": null,
            "style": "IPY_MODEL_a30dc713260a496c990c378a39af4ea3",
            "value": ">Protein1\nMKTIIALSYIFCLVFADYKDDDDK\n>Protein2\nMVKVYAPASSANMSVGFDVLGAAVTPVDGALLGDVVTVEAAETF\n>Protein3\nMADSEQESSTELQREEEELRQQQQQQGGRGGGRGGGPPPPPPP\n>Protein4\nMQIFVKTLTGKTITLEVESSDTIDNVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG\n"
          }
        },
        "ddaec44ba0ad44828e63900cd2baeff8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dd7dd6a5043c438094e8dcd1712613d0",
            "placeholder": "​",
            "style": "IPY_MODEL_02a9ed1d3d9942c5bcbfadb0caad16ea",
            "value": "<h3>Peptide CSV Input</h3>"
          }
        },
        "246038462e24467da1094fd6f33c975a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_fa9ccbf39eef42708f3112bf0e15ace4",
            "placeholder": "Paste CSV content here...",
            "rows": null,
            "style": "IPY_MODEL_347a4d3fbb8e45279864de736d80e8e8",
            "value": ""
          }
        },
        "3db14ac02a5e4116b03a12808adea232": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3a62da88269941f09130d24141f542de",
              "IPY_MODEL_4dc861c874254cefa204da640a7a2720"
            ],
            "layout": "IPY_MODEL_d481f18e5adf463d8dab34502bfee40a"
          }
        },
        "34b6669b2e2d46389435e63dbf519b05": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_3ac38e61d5f0422e9490806999104392",
            "msg_id": "",
            "outputs": []
          }
        },
        "9e07fa4b34ef4c3f9983b50439de6dc0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0d315b8a40264cdea729e245f9754827": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d1e3a9a87f5a4a18a5abe2eaec3fe741": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6478b5f4a0144952b6bf10e022809dad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "150px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "a30dc713260a496c990c378a39af4ea3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "dd7dd6a5043c438094e8dcd1712613d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "02a9ed1d3d9942c5bcbfadb0caad16ea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fa9ccbf39eef42708f3112bf0e15ace4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "150px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "347a4d3fbb8e45279864de736d80e8e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3a62da88269941f09130d24141f542de": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SelectMultipleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SelectMultipleModel",
            "_options_labels": [
              "Protein1",
              "Protein2",
              "Protein3",
              "Protein4"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "SelectMultipleView",
            "description": "Proteins:",
            "description_tooltip": null,
            "disabled": false,
            "index": [],
            "layout": "IPY_MODEL_014e6cc15d0742b0a4abcfd28a27f133",
            "rows": 5,
            "style": "IPY_MODEL_16f4d7559e904344bb02a37445c5db57"
          }
        },
        "4dc861c874254cefa204da640a7a2720": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Generate Plot",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_d39cf110dc184cde9e67bd28e4b6bdd5",
            "style": "IPY_MODEL_acd57c6013e04f5bb7b92aa139da8753",
            "tooltip": ""
          }
        },
        "d481f18e5adf463d8dab34502bfee40a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "014e6cc15d0742b0a4abcfd28a27f133": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "max-content"
          }
        },
        "16f4d7559e904344bb02a37445c5db57": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d39cf110dc184cde9e67bd28e4b6bdd5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acd57c6013e04f5bb7b92aa139da8753": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "3ac38e61d5f0422e9490806999104392": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "41a69f38b4bb4f33832bf572628eec9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e58e608b233f4fbebcc8c2cc7d11254e",
              "IPY_MODEL_274609d31d694ccbb4a95025cbcfe5ec"
            ],
            "layout": "IPY_MODEL_803f66a1d16843eaa90071e7ba42500d"
          }
        },
        "e58e608b233f4fbebcc8c2cc7d11254e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SelectMultipleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SelectMultipleModel",
            "_options_labels": [
              "Protein1",
              "Protein2",
              "Protein3",
              "Protein4"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "SelectMultipleView",
            "description": "Select proteins:",
            "description_tooltip": null,
            "disabled": false,
            "index": [
              1
            ],
            "layout": "IPY_MODEL_d48d63d476b0423a84cb5bc319c83dad",
            "rows": 5,
            "style": "IPY_MODEL_9eff779df7fa4846810d6af318625645"
          }
        },
        "274609d31d694ccbb4a95025cbcfe5ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Generate Plot",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_27ac57853b164283b6e805f1100f76ef",
            "style": "IPY_MODEL_2be6114317ba4dfcbf1f949ddc7422dd",
            "tooltip": ""
          }
        },
        "803f66a1d16843eaa90071e7ba42500d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d48d63d476b0423a84cb5bc319c83dad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "max-content"
          }
        },
        "9eff779df7fa4846810d6af318625645": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "27ac57853b164283b6e805f1100f76ef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2be6114317ba4dfcbf1f949ddc7422dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "2ada6e6ac8ca40f2a70d6d5ad9d2ddc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TabModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TabModel",
            "_titles": {
              "0": "Peptigram Analysis"
            },
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TabView",
            "box_style": "",
            "children": [
              "IPY_MODEL_0da39e7dbda84d46ae468c5ce3b9f30c"
            ],
            "layout": "IPY_MODEL_fa440ea496f64ac0aa9fb6e26777ab54",
            "selected_index": 0
          }
        },
        "0da39e7dbda84d46ae468c5ce3b9f30c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9570d860904c4d069bd9e0810dbba88a",
              "IPY_MODEL_8a6470f88442468284b4e3fbad0bfc56",
              "IPY_MODEL_ce41334710414775b5d606edb62f0d6d",
              "IPY_MODEL_1f0db0300f324f29854d2bde98dc75cc",
              "IPY_MODEL_710296ba107a4eafbf78f22085f958b0",
              "IPY_MODEL_5c4ca12c946747d38e27dbfac89342a5"
            ],
            "layout": "IPY_MODEL_6dcc00e25d114c45a5f158a3d66754f1"
          }
        },
        "fa440ea496f64ac0aa9fb6e26777ab54": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9570d860904c4d069bd9e0810dbba88a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_64af451c8cd54d4e8b81f6e312d9330b",
            "placeholder": "​",
            "style": "IPY_MODEL_9d179cda0fd4485b927a61a301ff52da",
            "value": "<h3>FASTA Input</h3>"
          }
        },
        "8a6470f88442468284b4e3fbad0bfc56": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_32fac3d6a1a546fba1a947033962f252",
            "placeholder": "Paste FASTA content here...",
            "rows": null,
            "style": "IPY_MODEL_112fcbb0d19e45e19cc51b0f246063ab",
            "value": ">sp|P01308|INS_HUMAN Insulin OS=Homo sapiens OX=9606 GN=INS PE=1 SV=1\nMALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAED\nLQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\n>sp|P01317|INS_MOUSE Insulin OS=Mus musculus OX=10090 GN=Ins2 PE=1 SV=1\nMALWIRSLPLLALLVLWEPKPTQAFVKQHLCGPHLVEALYLVCGERGFFYTPMSRREVED\nPQVAQLELGGGPGAGDLQTLALEVAQQKRGIVDQCCTSICSLYQLENYCN"
          }
        },
        "ce41334710414775b5d606edb62f0d6d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_20d9db0a326045ea961eca91680fc8db",
            "placeholder": "​",
            "style": "IPY_MODEL_f35c03996a224980a46fbc02578ebb40",
            "value": "<h3>Peptide CSV Input</h3>"
          }
        },
        "1f0db0300f324f29854d2bde98dc75cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_0a55619da8b54a5291830403e763c82e",
            "placeholder": "Paste CSV content here...",
            "rows": null,
            "style": "IPY_MODEL_f7e04973230c4e209df8ad1f865204b5",
            "value": "Peptide\tUniProt id\tStart position\tEnd position\tIntensity ArgC\tIntensity LysC\tIntensity ArgCLysC\nSADSELCGPR\tQ2KIX7\t33\t42\t805433.3333\t0\t0\nTLAIAR\tQ9TUM6\t310\t315\t925300\t0\t0\nFSSSSGYGGGSSRVCGR\tP35527\t47\t63\t983800\t0\t0\nLQITAGR\tP04264\t380\t386\t1196366.667\t0\t0\n"
          }
        },
        "710296ba107a4eafbf78f22085f958b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_fda7c0e0423b47c3b6eee490d66b36be",
              "IPY_MODEL_e46fd328851f4307b8c0a477e497226d"
            ],
            "layout": "IPY_MODEL_bd436cb8f59b4a52be2e0e79ddf88971"
          }
        },
        "5c4ca12c946747d38e27dbfac89342a5": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_9760b5d822c54db48111d0a3701f5706",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "❌ Error generating plot: 'UniProt id'\n"
                ]
              }
            ]
          }
        },
        "6dcc00e25d114c45a5f158a3d66754f1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "64af451c8cd54d4e8b81f6e312d9330b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9d179cda0fd4485b927a61a301ff52da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "32fac3d6a1a546fba1a947033962f252": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "150px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "112fcbb0d19e45e19cc51b0f246063ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "20d9db0a326045ea961eca91680fc8db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f35c03996a224980a46fbc02578ebb40": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0a55619da8b54a5291830403e763c82e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "150px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "f7e04973230c4e209df8ad1f865204b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fda7c0e0423b47c3b6eee490d66b36be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SelectMultipleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SelectMultipleModel",
            "_options_labels": [
              "sp|P01308|INS_HUMAN",
              "sp|P01317|INS_MOUSE"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "SelectMultipleView",
            "description": "Proteins:",
            "description_tooltip": null,
            "disabled": false,
            "index": [
              1
            ],
            "layout": "IPY_MODEL_3218d197298c46c9a711e92da1685d2e",
            "rows": 5,
            "style": "IPY_MODEL_a1f069c544cd45eea6e4691efb0efa30"
          }
        },
        "e46fd328851f4307b8c0a477e497226d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Generate Plot",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_f2ec42a113744f3ea2e002419b6ddd5c",
            "style": "IPY_MODEL_728aa80103344664bfd1ef18f85b82bf",
            "tooltip": ""
          }
        },
        "bd436cb8f59b4a52be2e0e79ddf88971": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3218d197298c46c9a711e92da1685d2e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "max-content"
          }
        },
        "a1f069c544cd45eea6e4691efb0efa30": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f2ec42a113744f3ea2e002419b6ddd5c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "728aa80103344664bfd1ef18f85b82bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "9760b5d822c54db48111d0a3701f5706": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sewali-art/peptigram/blob/main/sew.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "XCR8E0e9X1o8",
        "outputId": "21892bd4-f7b7-45a1-970e-8726d3613d55"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'Bio'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-6efa47a13996>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_objects\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mBio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSeqIO\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'Bio'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "\n",
        "# Function to read protein sequences from a FASTA file\n",
        "def read_fasta(file_path):\n",
        "    sequences = {}\n",
        "    for record in SeqIO.parse(file_path, \"fasta\"):\n",
        "        sequences[record.id] = str(record.seq)  # Store sequences by UniProt ID\n",
        "    return sequences\n",
        "\n",
        "# Function to find all occurrences of a peptide in a protein sequence\n",
        "def find_all_peptide_positions(protein_seq, peptide):\n",
        "    return [(m.start(), m.start() + len(peptide)) for m in re.finditer(peptide, protein_seq)]\n",
        "\n",
        "# 📥 Load protein sequences\n",
        "protein_sequences = read_fasta(\"proteins.fasta\")\n",
        "\n",
        "# 📥 Load peptides from CSV\n",
        "df = pd.read_csv(\"peptides.csv\")\n",
        "\n",
        "# 🔎 Prepare data for visualization\n",
        "fig = go.Figure()\n",
        "y_offset = 0  # Track position for multiple proteins\n",
        "\n",
        "for uniprot_id, protein_seq in protein_sequences.items():\n",
        "    protein_length = len(protein_seq)\n",
        "    coverage = np.zeros(protein_length)  # Track coverage\n",
        "\n",
        "    # Filter peptides for this specific protein\n",
        "    protein_peptides = df[df[\"UniProt id\"] == uniprot_id]\n",
        "\n",
        "    # Process peptides\n",
        "    annotations = []\n",
        "    for _, row in protein_peptides.iterrows():\n",
        "        peptide = row[\"Peptide\"]\n",
        "        intensity = row[[\"Intensity ArgC\", \"Intensity LysC\", \"Intensity ArgCLysC\"]].mean()\n",
        "\n",
        "        # Find peptide positions (or use CSV positions if provided)\n",
        "        if pd.isna(row[\"Start position\"]) or pd.isna(row[\"End position\"]):\n",
        "            matches = find_all_peptide_positions(protein_seq, peptide)\n",
        "        else:\n",
        "            matches = [(int(row[\"Start position\"]), int(row[\"End position\"]))]\n",
        "\n",
        "        for start, end in matches:\n",
        "            coverage[start:end] += 1\n",
        "            annotations.append((start, end, peptide, intensity))\n",
        "\n",
        "    # Normalize coverage for color mapping\n",
        "    colors = coverage / coverage.max() if coverage.max() > 0 else coverage\n",
        "\n",
        "    # 🎨 Add a bar trace for this protein\n",
        "    fig.add_trace(go.Bar(\n",
        "        x=list(range(protein_length)),\n",
        "        y=coverage + y_offset,  # Offset for multiple proteins\n",
        "        marker=dict(color=colors, colorscale=\"Viridis\"),\n",
        "        name=f\"{uniprot_id} ({protein_length} aa)\"\n",
        "    ))\n",
        "\n",
        "    # Add peptide tooltips\n",
        "    for start, end, peptide, intensity in annotations:\n",
        "        fig.add_trace(go.Scatter(\n",
        "            x=[(start + end) / 2],\n",
        "            y=[y_offset + max(coverage) + 2],\n",
        "            text=f\"Peptide: {peptide}<br>Start: {start}<br>End: {end}<br>Intensity: {intensity:.2f}\",\n",
        "            mode=\"markers\",\n",
        "            marker=dict(size=8, color=\"red\"),\n",
        "            hoverinfo=\"text\"\n",
        "        ))\n",
        "\n",
        "    y_offset += max(coverage) + 10  # Space between proteins\n",
        "\n",
        "# Layout customization\n",
        "fig.update_layout(\n",
        "    title=\"Overlayed Peptide Coverage Map for Multiple Proteins\",\n",
        "    xaxis_title=\"Protein Position\",\n",
        "    yaxis=dict(\n",
        "        title=\"Proteins (Stacked)\",\n",
        "        tickmode=\"array\",\n",
        "        tickvals=[i * 10 for i in range(len(protein_sequences))],\n",
        "        ticktext=list(protein_sequences.keys())\n",
        "    ),\n",
        "    hovermode=\"closest\",\n",
        "    template=\"plotly_white\"\n",
        ")\n",
        "\n",
        "# Show the figure\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import ipywidgets as widgets\n",
        "from io import StringIO\n",
        "import json\n",
        "\n",
        "# Create sample FASTA file\n",
        "sample_fasta = \"\"\">sp|P01308|INS_HUMAN Insulin OS=Homo sapiens OX=9606 GN=INS PE=1 SV=1\n",
        "MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAED\n",
        "LQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\n",
        ">sp|P01317|INS_MOUSE Insulin OS=Mus musculus OX=10090 GN=Ins2 PE=1 SV=1\n",
        "MALWIRSLPLLALLVLWEPKPTQAFVKQHLCGPHLVEALYLVCGERGFFYTPMSRREVED\n",
        "PQVAQLELGGGPGAGDLQTLALEVAQQKRGIVDQCCTSICSLYQLENYCN\"\"\"\n",
        "\n",
        "# Write sample FASTA file\n",
        "with open('sample_proteins.fasta', 'w') as f:\n",
        "    f.write(sample_fasta)\n",
        "\n",
        "# Create sample CSV file\n",
        "sample_csv = \"\"\"UniProt id,Peptide,Start position,End position,Intensity\n",
        "P01308,FVNQHLCGSHLVEAL,15,30,1000\n",
        "P01308,GERGFFYTPK,35,45,800\n",
        "P01317,FVKQHLCGPHLVEAL,15,30,1200\n",
        "P01317,GERGFFYTPM,35,45,900\"\"\"\n",
        "\n",
        "# Write sample CSV file\n",
        "with open('sample_peptides.csv', 'w') as f:\n",
        "    f.write(sample_csv)\n",
        "\n",
        "print(\"Sample files created: 'sample_proteins.fasta' and 'sample_peptides.csv'\")\n",
        "print(\"\\nYou can download these files and then upload them back to test the system.\")\n",
        "print(\"\\nOr you can use your own FASTA and CSV files with similar format.\")\n",
        "\n",
        "class PeptigramAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.protein_sequences = {}\n",
        "        self.peptide_data = None\n",
        "        self.coverage_data = {}\n",
        "        self.plot = None\n",
        "\n",
        "    def load_fasta_file(self, fasta_file):\n",
        "        \"\"\"Load protein sequences from FASTA file\"\"\"\n",
        "        self.protein_sequences = {}\n",
        "        for record in SeqIO.parse(fasta_file, \"fasta\"):\n",
        "            self.protein_sequences[record.id] = str(record.seq)\n",
        "        return list(self.protein_sequences.keys())\n",
        "\n",
        "    def load_peptides_file(self, csv_file):\n",
        "        \"\"\"Load peptide data from CSV file\"\"\"\n",
        "        self.peptide_data = pd.read_csv(csv_file)\n",
        "        required_cols = ['UniProt id', 'Peptide', 'Start position', 'End position']\n",
        "        if not all(col in self.peptide_data.columns for col in required_cols):\n",
        "            raise ValueError(f\"CSV must contain columns: {required_cols}\")\n",
        "\n",
        "    def generate_plot(self, selected_proteins=None):\n",
        "        \"\"\"Generate coverage plot for selected proteins\"\"\"\n",
        "        if selected_proteins is None:\n",
        "            selected_proteins = list(self.protein_sequences.keys())\n",
        "\n",
        "        fig = go.Figure()\n",
        "        y_offset = 0\n",
        "\n",
        "        for protein_id in selected_proteins:\n",
        "            if protein_id not in self.protein_sequences:\n",
        "                continue\n",
        "\n",
        "            protein_seq = self.protein_sequences[protein_id]\n",
        "            protein_length = len(protein_seq)\n",
        "            coverage = np.zeros(protein_length)\n",
        "\n",
        "            # Filter peptides for this protein\n",
        "            protein_peptides = self.peptide_data[\n",
        "                self.peptide_data['UniProt id'] == protein_id\n",
        "            ]\n",
        "\n",
        "            # Calculate coverage\n",
        "            for _, row in protein_peptides.iterrows():\n",
        "                start = int(row['Start position'])\n",
        "                end = int(row['End position'])\n",
        "                intensity = float(row['Intensity'])\n",
        "                coverage[start:end] += intensity\n",
        "\n",
        "                # Add peptide marker\n",
        "                fig.add_trace(go.Scatter(\n",
        "                    x=[(start + end) / 2],\n",
        "                    y=[y_offset + coverage[start:end].max() + 0.1],\n",
        "                    mode='markers',\n",
        "                    marker=dict(size=8, color='red'),\n",
        "                    name=f\"{protein_id} Peptide\",\n",
        "                    text=f\"Peptide: {row['Peptide']}<br>Position: {start}-{end}<br>Intensity: {intensity:.2f}\",\n",
        "                    hoverinfo='text',\n",
        "                    showlegend=False\n",
        "                ))\n",
        "\n",
        "            # Add coverage trace\n",
        "            fig.add_trace(go.Bar(\n",
        "                x=list(range(protein_length)),\n",
        "                y=coverage + y_offset,\n",
        "                name=f\"{protein_id} Coverage\",\n",
        "                hovertemplate=\"Position: %{x}<br>Coverage: %{y:.2f}<extra></extra>\"\n",
        "            ))\n",
        "\n",
        "            y_offset += coverage.max() + 1\n",
        "\n",
        "        fig.update_layout(\n",
        "            title=\"Peptide Coverage Map\",\n",
        "            xaxis_title=\"Protein Position\",\n",
        "            yaxis_title=\"Coverage Depth\",\n",
        "            showlegend=True,\n",
        "            hovermode='closest',\n",
        "            template='plotly_white',\n",
        "            height=200 + (300 * len(selected_proteins))\n",
        "        )\n",
        "\n",
        "        self.plot = fig\n",
        "        return fig\n",
        "\n",
        "# Create Peptigram instance\n",
        "analyzer = PeptigramAnalyzer()\n",
        "\n",
        "# Function to handle file uploads\n",
        "def process_files():\n",
        "    print(\"Please upload your FASTA file...\")\n",
        "    uploaded_fasta = files.upload()\n",
        "    fasta_file = list(uploaded_fasta.keys())[0]\n",
        "\n",
        "    print(\"\\nPlease upload your peptides CSV file...\")\n",
        "    uploaded_csv = files.upload()\n",
        "    csv_file = list(uploaded_csv.keys())[0]\n",
        "\n",
        "    # Load files\n",
        "    print(\"\\nProcessing files...\")\n",
        "    proteins = analyzer.load_fasta_file(fasta_file)\n",
        "    analyzer.load_peptides_file(csv_file)\n",
        "\n",
        "    # Create protein selection widget\n",
        "    protein_select = widgets.SelectMultiple(\n",
        "        options=proteins,\n",
        "        description='Select proteins:',\n",
        "        layout={'width': 'max-content'}\n",
        "    )\n",
        "\n",
        "    # Create plot button\n",
        "    plot_button = widgets.Button(\n",
        "        description='Generate Plot',\n",
        "        button_style='primary'\n",
        "    )\n",
        "\n",
        "    def on_plot_click(b):\n",
        "        if not protein_select.value:\n",
        "            print(\"Please select at least one protein\")\n",
        "            return\n",
        "        fig = analyzer.generate_plot(protein_select.value)\n",
        "        fig.show()\n",
        "\n",
        "    plot_button.on_click(on_plot_click)\n",
        "\n",
        "    # Display widgets\n",
        "    display(widgets.VBox([protein_select, plot_button]))\n",
        "\n",
        "# Run the interface\n",
        "print(\"First, download the sample files if you want to test the system.\")\n",
        "print(\"Then, run process_files() to start the upload process.\")\n",
        "print(\"\\nTo begin, type: process_files()\")"
      ],
      "metadata": {
        "id": "CzM2v7hSKFmq",
        "outputId": "b6bae144-208e-4658-f164-86f2c3ed709b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'Bio'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-f0b5521db5f4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_objects\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mBio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSeqIO\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHTML\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'Bio'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib pandas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7HlLkpXQZQkB",
        "outputId": "79662b9f-3337-475f-c88d-2d11a6403c03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install biopython\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5AxCORqnZcrG",
        "outputId": "78cc37d1-9721-4ecf-e9f2-81c7fcf94a73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting biopython\n",
            "  Downloading biopython-1.85-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from biopython) (1.26.4)\n",
            "Downloading biopython-1.85-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/3.3 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━\u001b[0m \u001b[32m2.6/3.3 MB\u001b[0m \u001b[31m78.9 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m56.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: biopython\n",
            "Successfully installed biopython-1.85\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "\n",
        "# Function to read protein sequences from a FASTA file\n",
        "def read_fasta(file_path):\n",
        "    sequences = {}\n",
        "    for record in SeqIO.parse(file_path, \"fasta\"):\n",
        "        sequences[record.id] = str(record.seq)  # Store sequences by UniProt ID\n",
        "    return sequences\n",
        "\n",
        "# Function to find all occurrences of a peptide in a protein sequence\n",
        "def find_all_peptide_positions(protein_seq, peptide):\n",
        "    return [(m.start(), m.start() + len(peptide)) for m in re.finditer(peptide, protein_seq)]\n",
        "\n",
        "# 📥 Load protein sequences\n",
        "protein_sequences = read_fasta(\"proteins.fasta\")\n",
        "\n",
        "# 📥 Load peptides from CSV\n",
        "df = pd.read_csv(\"peptides.csv\")\n",
        "\n",
        "# 🔎 Prepare data for visualization\n",
        "fig = go.Figure()\n",
        "y_offset = 0  # Track position for multiple proteins\n",
        "\n",
        "for uniprot_id, protein_seq in protein_sequences.items():\n",
        "    protein_length = len(protein_seq)\n",
        "    coverage = np.zeros(protein_length)  # Track coverage\n",
        "\n",
        "    # Filter peptides for this specific protein\n",
        "    protein_peptides = df[df[\"UniProt id\"] == uniprot_id]\n",
        "\n",
        "    # Process peptides\n",
        "    annotations = []\n",
        "    for _, row in protein_peptides.iterrows():\n",
        "        peptide = row[\"Peptide\"]\n",
        "        intensity = row[[\"Intensity ArgC\", \"Intensity LysC\", \"Intensity ArgCLysC\"]].mean()\n",
        "\n",
        "        # Find peptide positions (or use CSV positions if provided)\n",
        "        if pd.isna(row[\"Start position\"]) or pd.isna(row[\"End position\"]):\n",
        "            matches = find_all_peptide_positions(protein_seq, peptide)\n",
        "        else:\n",
        "            matches = [(int(row[\"Start position\"]), int(row[\"End position\"]))]\n",
        "\n",
        "        for start, end in matches:\n",
        "            coverage[start:end] += 1\n",
        "            annotations.append((start, end, peptide, intensity))\n",
        "\n",
        "    # Normalize coverage for color mapping\n",
        "    colors = coverage / coverage.max() if coverage.max() > 0 else coverage\n",
        "\n",
        "    # 🎨 Add a bar trace for this protein\n",
        "    fig.add_trace(go.Bar(\n",
        "        x=list(range(protein_length)),\n",
        "        y=coverage + y_offset,  # Offset for multiple proteins\n",
        "        marker=dict(color=colors, colorscale=\"Viridis\"),\n",
        "        name=f\"{uniprot_id} ({protein_length} aa)\"\n",
        "    ))\n",
        "\n",
        "    # Add peptide tooltips\n",
        "    for start, end, peptide, intensity in annotations:\n",
        "        fig.add_trace(go.Scatter(\n",
        "            x=[(start + end) / 2],\n",
        "            y=[y_offset + max(coverage) + 2],\n",
        "            text=f\"Peptide: {peptide}<br>Start: {start}<br>End: {end}<br>Intensity: {intensity:.2f}\",\n",
        "            mode=\"markers\",\n",
        "            marker=dict(size=8, color=\"red\"),\n",
        "            hoverinfo=\"text\"\n",
        "        ))\n",
        "\n",
        "    y_offset += max(coverage) + 10  # Space between proteins\n",
        "\n",
        "# Layout customization\n",
        "fig.update_layout(\n",
        "    title=\"Overlayed Peptide Coverage Map for Multiple Proteins\",\n",
        "    xaxis_title=\"Protein Position\",\n",
        "    yaxis=dict(\n",
        "        title=\"Proteins (Stacked)\",\n",
        "        tickmode=\"array\",\n",
        "        tickvals=[i * 10 for i in range(len(protein_sequences))],\n",
        "        ticktext=list(protein_sequences.keys())\n",
        "    ),\n",
        "    hovermode=\"closest\",\n",
        "    template=\"plotly_white\"\n",
        ")\n",
        "\n",
        "# Show the figure\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "tz8ChT66Zp8W",
        "outputId": "7de0e938-9ace-4a21-b685-5633451097ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"cf54f80f-fb6c-48dd-b314-1714729e8af2\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"cf54f80f-fb6c-48dd-b314-1714729e8af2\")) {                    Plotly.newPlot(                        \"cf54f80f-fb6c-48dd-b314-1714729e8af2\",                        [{\"marker\":{\"color\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"name\":\"Protein1 (24 aa)\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\"y\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"type\":\"bar\"},{\"marker\":{\"color\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"name\":\"Protein2 (44 aa)\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],\"y\":[10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0],\"type\":\"bar\"},{\"marker\":{\"color\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"name\":\"Protein3 (43 aa)\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],\"y\":[20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0],\"type\":\"bar\"},{\"marker\":{\"color\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"name\":\"Protein4 (76 aa)\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],\"y\":[30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"yaxis\":{\"title\":{\"text\":\"Proteins (Stacked)\"},\"tickmode\":\"array\",\"tickvals\":[0,10,20,30],\"ticktext\":[\"Protein1\",\"Protein2\",\"Protein3\",\"Protein4\"]},\"title\":{\"text\":\"Overlayed Peptide Coverage Map for Multiple Proteins\"},\"xaxis\":{\"title\":{\"text\":\"Protein Position\"}},\"hovermode\":\"closest\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('cf54f80f-fb6c-48dd-b314-1714729e8af2');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install plotly pandas numpy ipywidgets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D9psaO_Jb5Uz",
        "outputId": "d4414904-69d3-4777-fe81-7bde289a526f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (7.7.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly) (24.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (5.7.1)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.6.10)\n",
            "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (7.34.0)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.0.13)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.4.2)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (75.1.0)\n",
            "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets)\n",
            "  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (3.0.50)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (2.18.0)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.1.7)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.11/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets) (6.5.5)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets) (0.8.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.5)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (24.0.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (23.1.0)\n",
            "Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.7.2)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.10.4)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (7.16.6)\n",
            "Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.6.0)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.21.1)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.2.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets) (0.2.13)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.3.6)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.11/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.2.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.13.3)\n",
            "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.2.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.3.0)\n",
            "Requirement already satisfied: markupsafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.0.2)\n",
            "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.1)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.10.2)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.5.1)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.21.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.23.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (21.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.5.1)\n",
            "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.4.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (25.1.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.22.3)\n",
            "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.11/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.24.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.17.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.6)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.12.2)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.22)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Downloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m33.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: jedi\n",
            "Successfully installed jedi-0.19.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import ipywidgets as widgets\n",
        "from io import StringIO\n",
        "import json\n",
        "\n",
        "class PeptigramAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.protein_sequences = {}\n",
        "        self.peptide_data = None\n",
        "        self.coverage_data = {}\n",
        "        self.plot = None\n",
        "\n",
        "    def load_fasta_from_string(self, fasta_content):\n",
        "        \"\"\"Load protein sequences from FASTA string content\"\"\"\n",
        "        fasta_handle = StringIO(fasta_content)\n",
        "        self.protein_sequences = {}\n",
        "        for record in SeqIO.parse(fasta_handle, \"fasta\"):\n",
        "            self.protein_sequences[record.id] = str(record.seq)\n",
        "        return list(self.protein_sequences.keys())\n",
        "\n",
        "    def load_peptides_from_string(self, csv_content):\n",
        "        \"\"\"Load peptide data from CSV string content\"\"\"\n",
        "        self.peptide_data = pd.read_csv(StringIO(csv_content))\n",
        "        # Validate required columns\n",
        "        required_cols = ['UniProt id', 'Peptide', 'Start position', 'End position']\n",
        "        if not all(col in self.peptide_data.columns for col in required_cols):\n",
        "            raise ValueError(f\"CSV must contain columns: {required_cols}\")\n",
        "\n",
        "    def find_peptide_positions(self, protein_seq, peptide):\n",
        "        \"\"\"Find all occurrences of a peptide in a protein sequence\"\"\"\n",
        "        return [(m.start(), m.start() + len(peptide))\n",
        "                for m in re.finditer(re.escape(peptide), protein_seq)]\n",
        "\n",
        "    def calculate_coverage(self, protein_id):\n",
        "        \"\"\"Calculate coverage for a specific protein\"\"\"\n",
        "        if protein_id not in self.protein_sequences:\n",
        "            raise ValueError(f\"Protein {protein_id} not found in FASTA\")\n",
        "\n",
        "        protein_seq = self.protein_sequences[protein_id]\n",
        "        protein_length = len(protein_seq)\n",
        "        coverage = np.zeros(protein_length)\n",
        "\n",
        "        # Filter peptides for this protein\n",
        "        protein_peptides = self.peptide_data[\n",
        "            self.peptide_data['UniProt id'] == protein_id\n",
        "        ]\n",
        "\n",
        "        peptide_annotations = []\n",
        "\n",
        "        for _, row in protein_peptides.iterrows():\n",
        "            peptide = row['Peptide']\n",
        "            # Use provided positions if available, otherwise find matches\n",
        "            if pd.notna(row['Start position']) and pd.notna(row['End position']):\n",
        "                positions = [(int(row['Start position']), int(row['End position']))]\n",
        "            else:\n",
        "                positions = self.find_peptide_positions(protein_seq, peptide)\n",
        "\n",
        "            # Calculate intensity if available\n",
        "            intensity_cols = [col for col in row.index if 'Intensity' in col]\n",
        "            intensity = row[intensity_cols].mean() if intensity_cols else 1.0\n",
        "\n",
        "            for start, end in positions:\n",
        "                coverage[start:end] += intensity\n",
        "                peptide_annotations.append({\n",
        "                    'start': start,\n",
        "                    'end': end,\n",
        "                    'peptide': peptide,\n",
        "                    'intensity': intensity\n",
        "                })\n",
        "\n",
        "        self.coverage_data[protein_id] = {\n",
        "            'coverage': coverage,\n",
        "            'annotations': peptide_annotations\n",
        "        }\n",
        "\n",
        "        return coverage, peptide_annotations\n",
        "\n",
        "    def generate_plot(self, selected_proteins=None):\n",
        "        \"\"\"Generate interactive coverage plot\"\"\"\n",
        "        if selected_proteins is None:\n",
        "            selected_proteins = list(self.protein_sequences.keys())\n",
        "\n",
        "        fig = go.Figure()\n",
        "        y_offset = 0\n",
        "\n",
        "        for protein_id in selected_proteins:\n",
        "            if protein_id not in self.protein_sequences:\n",
        "                continue\n",
        "\n",
        "            coverage, annotations = self.calculate_coverage(protein_id)\n",
        "            protein_length = len(self.protein_sequences[protein_id])\n",
        "\n",
        "            # Add coverage trace\n",
        "            fig.add_trace(go.Bar(\n",
        "                x=list(range(protein_length)),\n",
        "                y=coverage + y_offset,\n",
        "                name=f\"{protein_id} Coverage\",\n",
        "                hovertemplate=\"Position: %{x}<br>Coverage: %{y:.2f}<extra></extra>\"\n",
        "            ))\n",
        "\n",
        "            # Add peptide annotations\n",
        "            for anno in annotations:\n",
        "                fig.add_trace(go.Scatter(\n",
        "                    x=[(anno['start'] + anno['end']) / 2],\n",
        "                    y=[y_offset + max(coverage) + 0.1],\n",
        "                    mode='markers',\n",
        "                    marker=dict(size=8, color='red'),\n",
        "                    name=f\"{protein_id} Peptide\",\n",
        "                    text=f\"Peptide: {anno['peptide']}<br>Position: {anno['start']}-{anno['end']}<br>Intensity: {anno['intensity']:.2f}\",\n",
        "                    hoverinfo='text'\n",
        "                ))\n",
        "\n",
        "            y_offset += max(coverage) + 1\n",
        "\n",
        "        fig.update_layout(\n",
        "            title=\"Peptide Coverage Map\",\n",
        "            xaxis_title=\"Protein Position\",\n",
        "            yaxis_title=\"Coverage Depth\",\n",
        "            showlegend=True,\n",
        "            hovermode='closest',\n",
        "            template='plotly_white',\n",
        "            height=200 + (300 * len(selected_proteins))\n",
        "        )\n",
        "\n",
        "        self.plot = fig\n",
        "        return fig\n",
        "\n",
        "class PeptigramUI:\n",
        "    def __init__(self):\n",
        "        self.analyzer = PeptigramAnalyzer()\n",
        "        self.setup_widgets()\n",
        "\n",
        "    def setup_widgets(self):\n",
        "        \"\"\"Create and arrange UI widgets\"\"\"\n",
        "        self.fasta_upload = widgets.Textarea(\n",
        "            placeholder='Paste FASTA content here...',\n",
        "            layout={'width': '100%', 'height': '150px'}\n",
        "        )\n",
        "\n",
        "        self.peptide_upload = widgets.Textarea(\n",
        "            placeholder='Paste CSV content here...',\n",
        "            layout={'width': '100%', 'height': '150px'}\n",
        "        )\n",
        "\n",
        "        self.protein_select = widgets.SelectMultiple(\n",
        "            options=[],\n",
        "            description='Proteins:',\n",
        "            layout={'width': 'max-content'}\n",
        "        )\n",
        "\n",
        "        self.plot_button = widgets.Button(\n",
        "            description='Generate Plot',\n",
        "            button_style='primary'\n",
        "        )\n",
        "\n",
        "        self.status_output = widgets.Output()\n",
        "\n",
        "        # Layout\n",
        "        self.tab = widgets.Tab([\n",
        "            widgets.VBox([\n",
        "                widgets.HTML('<h3>FASTA Input</h3>'),\n",
        "                self.fasta_upload,\n",
        "                widgets.HTML('<h3>Peptide CSV Input</h3>'),\n",
        "                self.peptide_upload,\n",
        "                widgets.HBox([self.protein_select, self.plot_button]),\n",
        "                self.status_output\n",
        "            ])\n",
        "        ])\n",
        "        self.tab.set_title(0, 'Peptigram Analysis')\n",
        "\n",
        "        # Events\n",
        "        self.fasta_upload.observe(self._on_fasta_change, names='value')\n",
        "        self.peptide_upload.observe(self._on_peptide_change, names='value')\n",
        "        self.plot_button.on_click(self._on_plot_click)\n",
        "\n",
        "    def _on_fasta_change(self, change):\n",
        "        \"\"\"Handle FASTA content changes\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if change.new:\n",
        "                    proteins = self.analyzer.load_fasta_from_string(change.new)\n",
        "                    self.protein_select.options = proteins\n",
        "                    print(\"✅ FASTA loaded successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error loading FASTA: {str(e)}\")\n",
        "\n",
        "    def _on_peptide_change(self, change):\n",
        "        \"\"\"Handle peptide CSV content changes\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if change.new:\n",
        "                    self.analyzer.load_peptides_from_string(change.new)\n",
        "                    print(\"✅ Peptide data loaded successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error loading peptides: {str(e)}\")\n",
        "\n",
        "    def _on_plot_click(self, b):\n",
        "        \"\"\"Handle plot generation\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if not self.protein_select.value:\n",
        "                    print(\"⚠️ Please select at least one protein\")\n",
        "                    return\n",
        "\n",
        "                fig = self.analyzer.generate_plot(self.protein_select.value)\n",
        "                fig.show()\n",
        "                print(\"✅ Plot generated successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error generating plot: {str(e)}\")\n",
        "\n",
        "    def display(self):\n",
        "        \"\"\"Display the UI\"\"\"\n",
        "        display(self.tab)\n",
        "\n",
        "# Example usage\n",
        "peptigram = PeptigramUI()\n",
        "peptigram.display()\n",
        "\n",
        "# Example FASTA content for testing\n",
        "example_fasta = \"\"\">sp|P01308|INS_HUMAN Insulin OS=Homo sapiens OX=9606 GN=INS PE=1 SV=1\n",
        "MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAED\n",
        "LQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\n",
        ">sp|P01317|INS_MOUSE Insulin OS=Mus musculus OX=10090 GN=Ins2 PE=1 SV=1\n",
        "MALWIRSLPLLALLVLWEPKPTQAFVKQHLCGPHLVEALYLVCGERGFFYTPMSRREVED\n",
        "PQVAQLELGGGPGAGDLQTLALEVAQQKRGIVDQCCTSICSLYQLENYCN\"\"\"\n",
        "\n",
        "# Example peptide CSV content for testing\n",
        "example_csv = \"\"\"UniProt id,Peptide,Start position,End position,Intensity\n",
        "P01308,FVNQHLCGSHLVEAL,15,30,1000\n",
        "P01308,GERGFFYTPK,35,45,800\n",
        "P01317,FVKQHLCGPHLVEAL,15,30,1200\n",
        "P01317,GERGFFYTPM,35,45,900\"\"\"\n",
        "\n",
        "print(\"Example FASTA and CSV content available as 'example_fasta' and 'example_csv'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616,
          "referenced_widgets": [
            "1f2cbe88fdf746af9e7d19dba7bdd977",
            "485c8727b9204011af689826c06fafa6",
            "123858288d874f60971fa94a74af8049",
            "f8f5e696613b4360887116ab9577883a",
            "f89871455c13436080fb6f7ef31f5d38",
            "ddaec44ba0ad44828e63900cd2baeff8",
            "246038462e24467da1094fd6f33c975a",
            "3db14ac02a5e4116b03a12808adea232",
            "34b6669b2e2d46389435e63dbf519b05",
            "9e07fa4b34ef4c3f9983b50439de6dc0",
            "0d315b8a40264cdea729e245f9754827",
            "d1e3a9a87f5a4a18a5abe2eaec3fe741",
            "6478b5f4a0144952b6bf10e022809dad",
            "a30dc713260a496c990c378a39af4ea3",
            "dd7dd6a5043c438094e8dcd1712613d0",
            "02a9ed1d3d9942c5bcbfadb0caad16ea",
            "fa9ccbf39eef42708f3112bf0e15ace4",
            "347a4d3fbb8e45279864de736d80e8e8",
            "3a62da88269941f09130d24141f542de",
            "4dc861c874254cefa204da640a7a2720",
            "d481f18e5adf463d8dab34502bfee40a",
            "014e6cc15d0742b0a4abcfd28a27f133",
            "16f4d7559e904344bb02a37445c5db57",
            "d39cf110dc184cde9e67bd28e4b6bdd5",
            "acd57c6013e04f5bb7b92aa139da8753",
            "3ac38e61d5f0422e9490806999104392"
          ]
        },
        "id": "CxrSJw6mY3TH",
        "outputId": "38763080-540f-44e7-dec3-6cbdd4ba4e87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Tab(children=(VBox(children=(HTML(value='<h3>FASTA Input</h3>'), Textarea(value='', layout=Layout(height='150p…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1f2cbe88fdf746af9e7d19dba7bdd977"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Example FASTA and CSV content available as 'example_fasta' and 'example_csv'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import ipywidgets as widgets\n",
        "from io import StringIO\n",
        "import json\n",
        "\n",
        "# Create sample FASTA file\n",
        "sample_fasta = \"\"\">sp|P01308|INS_HUMAN Insulin OS=Homo sapiens OX=9606 GN=INS PE=1 SV=1\n",
        "MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAED\n",
        "LQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\n",
        ">sp|P01317|INS_MOUSE Insulin OS=Mus musculus OX=10090 GN=Ins2 PE=1 SV=1\n",
        "MALWIRSLPLLALLVLWEPKPTQAFVKQHLCGPHLVEALYLVCGERGFFYTPMSRREVED\n",
        "PQVAQLELGGGPGAGDLQTLALEVAQQKRGIVDQCCTSICSLYQLENYCN\"\"\"\n",
        "\n",
        "# Write sample FASTA file\n",
        "with open('sample_proteins.fasta', 'w') as f:\n",
        "    f.write(sample_fasta)\n",
        "\n",
        "# Create sample CSV file\n",
        "sample_csv = \"\"\"UniProt id,Peptide,Start position,End position,Intensity\n",
        "P01308,FVNQHLCGSHLVEAL,15,30,1000\n",
        "P01308,GERGFFYTPK,35,45,800\n",
        "P01317,FVKQHLCGPHLVEAL,15,30,1200\n",
        "P01317,GERGFFYTPM,35,45,900\"\"\"\n",
        "\n",
        "# Write sample CSV file\n",
        "with open('sample_peptides.csv', 'w') as f:\n",
        "    f.write(sample_csv)\n",
        "\n",
        "print(\"Sample files created: 'sample_proteins.fasta' and 'sample_peptides.csv'\")\n",
        "print(\"\\nYou can download these files and then upload them back to test the system.\")\n",
        "print(\"\\nOr you can use your own FASTA and CSV files with similar format.\")\n",
        "\n",
        "class PeptigramAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.protein_sequences = {}\n",
        "        self.peptide_data = None\n",
        "        self.coverage_data = {}\n",
        "        self.plot = None\n",
        "\n",
        "    def load_fasta_file(self, fasta_file):\n",
        "        \"\"\"Load protein sequences from FASTA file\"\"\"\n",
        "        self.protein_sequences = {}\n",
        "        for record in SeqIO.parse(fasta_file, \"fasta\"):\n",
        "            self.protein_sequences[record.id] = str(record.seq)\n",
        "        return list(self.protein_sequences.keys())\n",
        "\n",
        "    def load_peptides_file(self, csv_file):\n",
        "        \"\"\"Load peptide data from CSV file\"\"\"\n",
        "        self.peptide_data = pd.read_csv(csv_file)\n",
        "        required_cols = ['UniProt id', 'Peptide', 'Start position', 'End position']\n",
        "        if not all(col in self.peptide_data.columns for col in required_cols):\n",
        "            raise ValueError(f\"CSV must contain columns: {required_cols}\")\n",
        "\n",
        "    def generate_plot(self, selected_proteins=None):\n",
        "        \"\"\"Generate coverage plot for selected proteins\"\"\"\n",
        "        if selected_proteins is None:\n",
        "            selected_proteins = list(self.protein_sequences.keys())\n",
        "\n",
        "        fig = go.Figure()\n",
        "        y_offset = 0\n",
        "\n",
        "        for protein_id in selected_proteins:\n",
        "            if protein_id not in self.protein_sequences:\n",
        "                continue\n",
        "\n",
        "            protein_seq = self.protein_sequences[protein_id]\n",
        "            protein_length = len(protein_seq)\n",
        "            coverage = np.zeros(protein_length)\n",
        "\n",
        "            # Filter peptides for this protein\n",
        "            protein_peptides = self.peptide_data[\n",
        "                self.peptide_data['UniProt id'] == protein_id\n",
        "            ]\n",
        "\n",
        "            # Calculate coverage\n",
        "            for _, row in protein_peptides.iterrows():\n",
        "                start = int(row['Start position'])\n",
        "                end = int(row['End position'])\n",
        "                intensity = float(row['Intensity'])\n",
        "                coverage[start:end] += intensity\n",
        "\n",
        "                # Add peptide marker\n",
        "                fig.add_trace(go.Scatter(\n",
        "                    x=[(start + end) / 2],\n",
        "                    y=[y_offset + coverage[start:end].max() + 0.1],\n",
        "                    mode='markers',\n",
        "                    marker=dict(size=8, color='red'),\n",
        "                    name=f\"{protein_id} Peptide\",\n",
        "                    text=f\"Peptide: {row['Peptide']}<br>Position: {start}-{end}<br>Intensity: {intensity:.2f}\",\n",
        "                    hoverinfo='text',\n",
        "                    showlegend=False\n",
        "                ))\n",
        "\n",
        "            # Add coverage trace\n",
        "            fig.add_trace(go.Bar(\n",
        "                x=list(range(protein_length)),\n",
        "                y=coverage + y_offset,\n",
        "                name=f\"{protein_id} Coverage\",\n",
        "                hovertemplate=\"Position: %{x}<br>Coverage: %{y:.2f}<extra></extra>\"\n",
        "            ))\n",
        "\n",
        "            y_offset += coverage.max() + 1\n",
        "\n",
        "        fig.update_layout(\n",
        "            title=\"Peptide Coverage Map\",\n",
        "            xaxis_title=\"Protein Position\",\n",
        "            yaxis_title=\"Coverage Depth\",\n",
        "            showlegend=True,\n",
        "            hovermode='closest',\n",
        "            template='plotly_white',\n",
        "            height=200 + (300 * len(selected_proteins))\n",
        "        )\n",
        "\n",
        "        self.plot = fig\n",
        "        return fig\n",
        "\n",
        "# Create Peptigram instance\n",
        "analyzer = PeptigramAnalyzer()\n",
        "\n",
        "# Function to handle file uploads\n",
        "def process_files():\n",
        "    print(\"Please upload your FASTA file...\")\n",
        "    uploaded_fasta = files.upload()\n",
        "    fasta_file = list(uploaded_fasta.keys())[0]\n",
        "\n",
        "    print(\"\\nPlease upload your peptides CSV file...\")\n",
        "    uploaded_csv = files.upload()\n",
        "    csv_file = list(uploaded_csv.keys())[0]\n",
        "\n",
        "    # Load files\n",
        "    print(\"\\nProcessing files...\")\n",
        "    proteins = analyzer.load_fasta_file(fasta_file)\n",
        "    analyzer.load_peptides_file(csv_file)\n",
        "\n",
        "    # Create protein selection widget\n",
        "    protein_select = widgets.SelectMultiple(\n",
        "        options=proteins,\n",
        "        description='Select proteins:',\n",
        "        layout={'width': 'max-content'}\n",
        "    )\n",
        "\n",
        "    # Create plot button\n",
        "    plot_button = widgets.Button(\n",
        "        description='Generate Plot',\n",
        "        button_style='primary'\n",
        "    )\n",
        "\n",
        "    def on_plot_click(b):\n",
        "        if not protein_select.value:\n",
        "            print(\"Please select at least one protein\")\n",
        "            return\n",
        "        fig = analyzer.generate_plot(protein_select.value)\n",
        "        fig.show()\n",
        "\n",
        "    plot_button.on_click(on_plot_click)\n",
        "\n",
        "    # Display widgets\n",
        "    display(widgets.VBox([protein_select, plot_button]))\n",
        "\n",
        "# Run the interface\n",
        "print(\"First, download the sample files if you want to test the system.\")\n",
        "print(\"Then, run process_files() to start the upload process.\")\n",
        "print(\"\\nTo begin, type: process_files()\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QvB7KuvhX6So",
        "outputId": "be4b6b02-414a-4c3a-8c61-630f275a4523"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample files created: 'sample_proteins.fasta' and 'sample_peptides.csv'\n",
            "\n",
            "You can download these files and then upload them back to test the system.\n",
            "\n",
            "Or you can use your own FASTA and CSV files with similar format.\n",
            "First, download the sample files if you want to test the system.\n",
            "Then, run process_files() to start the upload process.\n",
            "\n",
            "To begin, type: process_files()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "process_files()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "41a69f38b4bb4f33832bf572628eec9b",
            "e58e608b233f4fbebcc8c2cc7d11254e",
            "274609d31d694ccbb4a95025cbcfe5ec",
            "803f66a1d16843eaa90071e7ba42500d",
            "d48d63d476b0423a84cb5bc319c83dad",
            "9eff779df7fa4846810d6af318625645",
            "27ac57853b164283b6e805f1100f76ef",
            "2be6114317ba4dfcbf1f949ddc7422dd"
          ]
        },
        "id": "0aumuqq3d2Pa",
        "outputId": "99fe72b3-0fe5-41d0-ed3a-ed3b3cfb90b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload your FASTA file...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a37f0013-b159-4993-9031-5e236bc41506\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a37f0013-b159-4993-9031-5e236bc41506\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving proteins.fasta to proteins (1).fasta\n",
            "\n",
            "Please upload your peptides CSV file...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-51866b07-989e-4a6b-ab42-2d8f35587c6f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-51866b07-989e-4a6b-ab42-2d8f35587c6f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving peptides.csv to peptides (1).csv\n",
            "\n",
            "Processing files...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(SelectMultiple(description='Select proteins:', layout=Layout(width='max-content'), options=('Pr…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "41a69f38b4bb4f33832bf572628eec9b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"32e33464-bc98-4f76-9fe4-581470716b1e\" class=\"plotly-graph-div\" style=\"height:500px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"32e33464-bc98-4f76-9fe4-581470716b1e\")) {                    Plotly.newPlot(                        \"32e33464-bc98-4f76-9fe4-581470716b1e\",                        [{\"hovertemplate\":\"Position: %{x}\\u003cbr\\u003eCoverage: %{y:.2f}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"name\":\"Protein1 Coverage\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\"y\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Peptide Coverage Map\"},\"xaxis\":{\"title\":{\"text\":\"Protein Position\"}},\"yaxis\":{\"title\":{\"text\":\"Coverage Depth\"}},\"showlegend\":true,\"hovermode\":\"closest\",\"height\":500},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('32e33464-bc98-4f76-9fe4-581470716b1e');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"1cdf9e09-b0ac-4c0b-9b00-d0d687d01003\" class=\"plotly-graph-div\" style=\"height:500px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1cdf9e09-b0ac-4c0b-9b00-d0d687d01003\")) {                    Plotly.newPlot(                        \"1cdf9e09-b0ac-4c0b-9b00-d0d687d01003\",                        [{\"hovertemplate\":\"Position: %{x}\\u003cbr\\u003eCoverage: %{y:.2f}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"name\":\"Protein2 Coverage\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],\"y\":[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Peptide Coverage Map\"},\"xaxis\":{\"title\":{\"text\":\"Protein Position\"}},\"yaxis\":{\"title\":{\"text\":\"Coverage Depth\"}},\"showlegend\":true,\"hovermode\":\"closest\",\"height\":500},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('1cdf9e09-b0ac-4c0b-9b00-d0d687d01003');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import ipywidgets as widgets\n",
        "from io import StringIO\n",
        "import json\n",
        "\n",
        "class PeptigramAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.protein_sequences = {}\n",
        "        self.peptide_data = None\n",
        "        self.coverage_data = {}\n",
        "        self.plot = None\n",
        "\n",
        "    def load_fasta_from_string(self, fasta_content):\n",
        "        \"\"\"Load protein sequences from FASTA string content\"\"\"\n",
        "        fasta_handle = StringIO(fasta_content)\n",
        "        self.protein_sequences = {}\n",
        "        for record in SeqIO.parse(fasta_handle, \"fasta\"):\n",
        "            self.protein_sequences[record.id] = str(record.seq)\n",
        "        return list(self.protein_sequences.keys())\n",
        "\n",
        "    def load_peptides_from_string(self, csv_content):\n",
        "        \"\"\"Load peptide data from CSV string content\"\"\"\n",
        "        self.peptide_data = pd.read_csv(StringIO(csv_content))\n",
        "        # Validate required columns\n",
        "        required_cols = ['UniProt id', 'Peptide', 'Start position', 'End position']\n",
        "        if not all(col in self.peptide_data.columns for col in required_cols):\n",
        "            raise ValueError(f\"CSV must contain columns: {required_cols}\")\n",
        "\n",
        "    def find_peptide_positions(self, protein_seq, peptide):\n",
        "        \"\"\"Find all occurrences of a peptide in a protein sequence\"\"\"\n",
        "        return [(m.start(), m.start() + len(peptide))\n",
        "                for m in re.finditer(re.escape(peptide), protein_seq)]\n",
        "\n",
        "    def calculate_coverage(self, protein_id):\n",
        "        \"\"\"Calculate coverage for a specific protein\"\"\"\n",
        "        if protein_id not in self.protein_sequences:\n",
        "            raise ValueError(f\"Protein {protein_id} not found in FASTA\")\n",
        "\n",
        "        protein_seq = self.protein_sequences[protein_id]\n",
        "        protein_length = len(protein_seq)\n",
        "        coverage = np.zeros(protein_length)\n",
        "\n",
        "        # Filter peptides for this protein\n",
        "        protein_peptides = self.peptide_data[\n",
        "            self.peptide_data['UniProt id'] == protein_id\n",
        "        ]\n",
        "\n",
        "        peptide_annotations = []\n",
        "\n",
        "        for _, row in protein_peptides.iterrows():\n",
        "            peptide = row['Peptide']\n",
        "            # Use provided positions if available, otherwise find matches\n",
        "            if pd.notna(row['Start position']) and pd.notna(row['End position']):\n",
        "                positions = [(int(row['Start position']), int(row['End position']))]\n",
        "            else:\n",
        "                positions = self.find_peptide_positions(protein_seq, peptide)\n",
        "\n",
        "            # Calculate intensity if available\n",
        "            intensity_cols = [col for col in row.index if 'Intensity' in col]\n",
        "            intensity = row[intensity_cols].mean() if intensity_cols else 1.0\n",
        "\n",
        "            for start, end in positions:\n",
        "                coverage[start:end] += intensity\n",
        "                peptide_annotations.append({\n",
        "                    'start': start,\n",
        "                    'end': end,\n",
        "                    'peptide': peptide,\n",
        "                    'intensity': intensity\n",
        "                })\n",
        "\n",
        "        self.coverage_data[protein_id] = {\n",
        "            'coverage': coverage,\n",
        "            'annotations': peptide_annotations\n",
        "        }\n",
        "\n",
        "        return coverage, peptide_annotations\n",
        "\n",
        "    def generate_plot(self, selected_proteins=None):\n",
        "        \"\"\"Generate interactive coverage plot\"\"\"\n",
        "        if selected_proteins is None:\n",
        "            selected_proteins = list(self.protein_sequences.keys())\n",
        "\n",
        "        fig = go.Figure()\n",
        "        y_offset = 0\n",
        "\n",
        "        for protein_id in selected_proteins:\n",
        "            if protein_id not in self.protein_sequences:\n",
        "                continue\n",
        "\n",
        "            coverage, annotations = self.calculate_coverage(protein_id)\n",
        "            protein_length = len(self.protein_sequences[protein_id])\n",
        "\n",
        "            # Add coverage trace\n",
        "            fig.add_trace(go.Bar(\n",
        "                x=list(range(protein_length)),\n",
        "                y=coverage + y_offset,\n",
        "                name=f\"{protein_id} Coverage\",\n",
        "                hovertemplate=\"Position: %{x}<br>Coverage: %{y:.2f}<extra></extra>\"\n",
        "            ))\n",
        "\n",
        "            # Add peptide annotations\n",
        "            for anno in annotations:\n",
        "                fig.add_trace(go.Scatter(\n",
        "                    x=[(anno['start'] + anno['end']) / 2],\n",
        "                    y=[y_offset + max(coverage) + 0.1],\n",
        "                    mode='markers',\n",
        "                    marker=dict(size=8, color='red'),\n",
        "                    name=f\"{protein_id} Peptide\",\n",
        "                    text=f\"Peptide: {anno['peptide']}<br>Position: {anno['start']}-{anno['end']}<br>Intensity: {anno['intensity']:.2f}\",\n",
        "                    hoverinfo='text'\n",
        "                ))\n",
        "\n",
        "            y_offset += max(coverage) + 1\n",
        "\n",
        "        fig.update_layout(\n",
        "            title=\"Peptide Coverage Map\",\n",
        "            xaxis_title=\"Protein Position\",\n",
        "            yaxis_title=\"Coverage Depth\",\n",
        "            showlegend=True,\n",
        "            hovermode='closest',\n",
        "            template='plotly_white',\n",
        "            height=200 + (300 * len(selected_proteins))\n",
        "        )\n",
        "\n",
        "        self.plot = fig\n",
        "        return fig\n",
        "\n",
        "class PeptigramUI:\n",
        "    def __init__(self):\n",
        "        self.analyzer = PeptigramAnalyzer()\n",
        "        self.setup_widgets()\n",
        "\n",
        "    def setup_widgets(self):\n",
        "        \"\"\"Create and arrange UI widgets\"\"\"\n",
        "        self.fasta_upload = widgets.Textarea(\n",
        "            placeholder='Paste FASTA content here...',\n",
        "            layout={'width': '100%', 'height': '150px'}\n",
        "        )\n",
        "\n",
        "        self.peptide_upload = widgets.Textarea(\n",
        "            placeholder='Paste CSV content here...',\n",
        "            layout={'width': '100%', 'height': '150px'}\n",
        "        )\n",
        "\n",
        "        self.protein_select = widgets.SelectMultiple(\n",
        "            options=[],\n",
        "            description='Proteins:',\n",
        "            layout={'width': 'max-content'}\n",
        "        )\n",
        "\n",
        "        self.plot_button = widgets.Button(\n",
        "            description='Generate Plot',\n",
        "            button_style='primary'\n",
        "        )\n",
        "\n",
        "        self.status_output = widgets.Output()\n",
        "\n",
        "        # Layout\n",
        "        self.tab = widgets.Tab([\n",
        "            widgets.VBox([\n",
        "                widgets.HTML('<h3>FASTA Input</h3>'),\n",
        "                self.fasta_upload,\n",
        "                widgets.HTML('<h3>Peptide CSV Input</h3>'),\n",
        "                self.peptide_upload,\n",
        "                widgets.HBox([self.protein_select, self.plot_button]),\n",
        "                self.status_output\n",
        "            ])\n",
        "        ])\n",
        "        self.tab.set_title(0, 'Peptigram Analysis')\n",
        "\n",
        "        # Events\n",
        "        self.fasta_upload.observe(self._on_fasta_change, names='value')\n",
        "        self.peptide_upload.observe(self._on_peptide_change, names='value')\n",
        "        self.plot_button.on_click(self._on_plot_click)\n",
        "\n",
        "    def _on_fasta_change(self, change):\n",
        "        \"\"\"Handle FASTA content changes\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if change.new:\n",
        "                    proteins = self.analyzer.load_fasta_from_string(change.new)\n",
        "                    self.protein_select.options = proteins\n",
        "                    print(\"✅ FASTA loaded successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error loading FASTA: {str(e)}\")\n",
        "\n",
        "    def _on_peptide_change(self, change):\n",
        "        \"\"\"Handle peptide CSV content changes\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if change.new:\n",
        "                    self.analyzer.load_peptides_from_string(change.new)\n",
        "                    print(\"✅ Peptide data loaded successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error loading peptides: {str(e)}\")\n",
        "\n",
        "    def _on_plot_click(self, b):\n",
        "        \"\"\"Handle plot generation\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            try:\n",
        "                if not self.protein_select.value:\n",
        "                    print(\"⚠️ Please select at least one protein\")\n",
        "                    return\n",
        "\n",
        "                fig = self.analyzer.generate_plot(self.protein_select.value)\n",
        "                fig.show()\n",
        "                print(\"✅ Plot generated successfully\")\n",
        "            except Exception as e:\n",
        "                print(f\"❌ Error generating plot: {str(e)}\")\n",
        "\n",
        "    def display(self):\n",
        "        \"\"\"Display the UI\"\"\"\n",
        "        display(self.tab)\n",
        "\n",
        "# Example usage\n",
        "peptigram = PeptigramUI()\n",
        "peptigram.display()\n",
        "\n",
        "# Example FASTA content for testing\n",
        "example_fasta = \"\"\">sp|P01308|INS_HUMAN Insulin OS=Homo sapiens OX=9606 GN=INS PE=1 SV=1\n",
        "MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAED\n",
        "LQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\n",
        ">sp|P01317|INS_MOUSE Insulin OS=Mus musculus OX=10090 GN=Ins2 PE=1 SV=1\n",
        "MALWIRSLPLLALLVLWEPKPTQAFVKQHLCGPHLVEALYLVCGERGFFYTPMSRREVED\n",
        "PQVAQLELGGGPGAGDLQTLALEVAQQKRGIVDQCCTSICSLYQLENYCN\"\"\"\n",
        "\n",
        "# Example peptide CSV content for testing\n",
        "example_csv = \"\"\"UniProt id,Peptide,Start position,End position,Intensity\n",
        "P01308,FVNQHLCGSHLVEAL,15,30,1000\n",
        "P01308,GERGFFYTPK,35,45,800\n",
        "P01317,FVKQHLCGPHLVEAL,15,30,1200\n",
        "P01317,GERGFFYTPM,35,45,900\"\"\"\n",
        "\n",
        "print(\"Example FASTA and CSV content available as 'example_fasta' and 'example_csv'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633,
          "referenced_widgets": [
            "2ada6e6ac8ca40f2a70d6d5ad9d2ddc2",
            "0da39e7dbda84d46ae468c5ce3b9f30c",
            "fa440ea496f64ac0aa9fb6e26777ab54",
            "9570d860904c4d069bd9e0810dbba88a",
            "8a6470f88442468284b4e3fbad0bfc56",
            "ce41334710414775b5d606edb62f0d6d",
            "1f0db0300f324f29854d2bde98dc75cc",
            "710296ba107a4eafbf78f22085f958b0",
            "5c4ca12c946747d38e27dbfac89342a5",
            "6dcc00e25d114c45a5f158a3d66754f1",
            "64af451c8cd54d4e8b81f6e312d9330b",
            "9d179cda0fd4485b927a61a301ff52da",
            "32fac3d6a1a546fba1a947033962f252",
            "112fcbb0d19e45e19cc51b0f246063ab",
            "20d9db0a326045ea961eca91680fc8db",
            "f35c03996a224980a46fbc02578ebb40",
            "0a55619da8b54a5291830403e763c82e",
            "f7e04973230c4e209df8ad1f865204b5",
            "fda7c0e0423b47c3b6eee490d66b36be",
            "e46fd328851f4307b8c0a477e497226d",
            "bd436cb8f59b4a52be2e0e79ddf88971",
            "3218d197298c46c9a711e92da1685d2e",
            "a1f069c544cd45eea6e4691efb0efa30",
            "f2ec42a113744f3ea2e002419b6ddd5c",
            "728aa80103344664bfd1ef18f85b82bf",
            "9760b5d822c54db48111d0a3701f5706"
          ]
        },
        "id": "59n7OS39gASm",
        "outputId": "84dd2cf0-524e-478c-cf98-1df143502e63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Tab(children=(VBox(children=(HTML(value='<h3>FASTA Input</h3>'), Textarea(value='', layout=Layout(height='150p…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2ada6e6ac8ca40f2a70d6d5ad9d2ddc2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Example FASTA and CSV content available as 'example_fasta' and 'example_csv'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from Bio import SeqIO\n",
        "import re\n",
        "from IPython.display import display, HTML\n",
        "import ipywidgets as widgets\n",
        "from io import StringIO\n",
        "import json\n",
        "import logging\n",
        "import sys\n",
        "from typing import Dict, List, Tuple, Optional\n",
        "import traceback\n",
        "\n",
        "# Set up logging\n",
        "logging.basicConfig(level=logging.INFO)\n",
        "logger = logging.getLogger('Peptigram')\n",
        "\n",
        "class PeptigramError(Exception):\n",
        "    \"\"\"Base class for Peptigram-specific exceptions\"\"\"\n",
        "    pass\n",
        "\n",
        "class FileFormatError(PeptigramError):\n",
        "    \"\"\"Exception raised for errors in file format\"\"\"\n",
        "    pass\n",
        "\n",
        "class DataValidationError(PeptigramError):\n",
        "    \"\"\"Exception raised for errors in data validation\"\"\"\n",
        "    pass\n",
        "\n",
        "class PlottingError(PeptigramError):\n",
        "    \"\"\"Exception raised for errors during plot generation\"\"\"\n",
        "    pass\n",
        "\n",
        "class DataProcessor:\n",
        "    \"\"\"Class to handle data validation and processing\"\"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_fasta_format(fasta_content: str) -> bool:\n",
        "        \"\"\"Validate FASTA format\"\"\"\n",
        "        if not fasta_content.startswith('>'):\n",
        "            raise FileFormatError(\"Invalid FASTA format: File must start with '>'\")\n",
        "        return True\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_csv_format(df: pd.DataFrame) -> bool:\n",
        "        \"\"\"Validate CSV format and required columns\"\"\"\n",
        "        required_cols = ['UniProt id', 'Peptide', 'Start position', 'End position']\n",
        "        missing_cols = [col for col in required_cols if col not in df.columns]\n",
        "        if missing_cols:\n",
        "            raise FileFormatError(f\"Missing required columns in CSV: {missing_cols}\")\n",
        "        return True\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_peptide_positions(row: pd.Series, protein_length: int) -> bool:\n",
        "        \"\"\"Validate peptide position data\"\"\"\n",
        "        try:\n",
        "            start = int(row['Start position'])\n",
        "            end = int(row['End position'])\n",
        "\n",
        "            if start < 0 or end > protein_length:\n",
        "                raise DataValidationError(\n",
        "                    f\"Invalid position range {start}-{end} for protein length {protein_length}\"\n",
        "                )\n",
        "            if start >= end:\n",
        "                raise DataValidationError(\n",
        "                    f\"Invalid position range: start ({start}) must be less than end ({end})\"\n",
        "                )\n",
        "            return True\n",
        "        except ValueError:\n",
        "            raise DataValidationError(\n",
        "                f\"Invalid position values: start={row['Start position']}, end={row['End position']}\"\n",
        "            )\n",
        "\n",
        "class PeptigramAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.protein_sequences: Dict[str, str] = {}\n",
        "        self.peptide_data: Optional[pd.DataFrame] = None\n",
        "        self.coverage_data: Dict[str, Dict] = {}\n",
        "        self.plot: Optional[go.Figure] = None\n",
        "        self.processor = DataProcessor()\n",
        "\n",
        "    def extract_uniprot_id(self, fasta_id: str) -> str:\n",
        "        \"\"\"Extract UniProt ID from FASTA identifier with error handling\"\"\"\n",
        "        try:\n",
        "            if '|' in fasta_id:\n",
        "                parts = fasta_id.split('|')\n",
        "                if len(parts) >= 2:\n",
        "                    return parts[1].strip()\n",
        "            return fasta_id.strip()\n",
        "        except Exception as e:\n",
        "            raise FileFormatError(f\"Error parsing FASTA identifier '{fasta_id}': {str(e)}\")\n",
        "\n",
        "    def load_fasta_file(self, fasta_file) -> List[str]:\n",
        "        \"\"\"Load protein sequences from FASTA file with error handling\"\"\"\n",
        "        try:\n",
        "            self.protein_sequences = {}\n",
        "            fasta_content = fasta_file.read().decode('utf-8')\n",
        "            self.processor.validate_fasta_format(fasta_content)\n",
        "\n",
        "            fasta_handle = StringIO(fasta_content)\n",
        "            for record in SeqIO.parse(fasta_handle, \"fasta\"):\n",
        "                uniprot_id = self.extract_uniprot_id(record.id)\n",
        "                sequence = str(record.seq)\n",
        "\n",
        "                # Validate sequence\n",
        "                if not sequence:\n",
        "                    raise FileFormatError(f\"Empty sequence for protein {uniprot_id}\")\n",
        "                if not re.match(\"^[A-Za-z]+$\", sequence):\n",
        "                    raise FileFormatError(\n",
        "                        f\"Invalid characters in sequence for protein {uniprot_id}\"\n",
        "                    )\n",
        "\n",
        "                self.protein_sequences[uniprot_id] = sequence\n",
        "                logger.info(f\"Loaded protein: {uniprot_id} (Length: {len(sequence)})\")\n",
        "\n",
        "            if not self.protein_sequences:\n",
        "                raise FileFormatError(\"No valid protein sequences found in FASTA file\")\n",
        "\n",
        "            return list(self.protein_sequences.keys())\n",
        "\n",
        "        except Exception as e:\n",
        "            raise FileFormatError(f\"Error loading FASTA file: {str(e)}\")\n",
        "\n",
        "    def load_peptides_file(self, csv_file) -> None:\n",
        "        \"\"\"Load peptide data from CSV file with error handling\"\"\"\n",
        "        try:\n",
        "            # Read CSV\n",
        "            csv_content = csv_file.read().decode('utf-8')\n",
        "            df = pd.read_csv(StringIO(csv_content))\n",
        "\n",
        "            # Clean column names\n",
        "            df.columns = df.columns.str.strip()\n",
        "\n",
        "            # Validate format\n",
        "            self.processor.validate_csv_format(df)\n",
        "\n",
        "            # Clean UniProt IDs\n",
        "            df['UniProt id'] = df['UniProt id'].str.strip()\n",
        "\n",
        "            # Validate protein IDs\n",
        "            unknown_proteins = set(df['UniProt id']) - set(self.protein_sequences.keys())\n",
        "            if unknown_proteins:\n",
        "                logger.warning(\n",
        "                    f\"Found peptides for unknown proteins: {unknown_proteins}\"\n",
        "                )\n",
        "\n",
        "            self.peptide_data = df\n",
        "            logger.info(\n",
        "                f\"Loaded {len(df)} peptides for {len(df['UniProt id'].unique())} proteins\"\n",
        "            )\n",
        "\n",
        "        except Exception as e:\n",
        "            raise FileFormatError(f\"Error loading peptide CSV file: {str(e)}\")\n",
        "\n",
        "    def generate_plot(self, selected_proteins: List[str]) -> go.Figure:\n",
        "        \"\"\"Generate coverage plot with error handling\"\"\"\n",
        "        if not selected_proteins:\n",
        "            raise PlottingError(\"No proteins selected for plotting\")\n",
        "\n",
        "        try:\n",
        "            fig = go.Figure()\n",
        "            y_offset = 0\n",
        "\n",
        "            for protein_id in selected_proteins:\n",
        "                if protein_id not in self.protein_sequences:\n",
        "                    logger.warning(f\"Skipping unknown protein: {protein_id}\")\n",
        "                    continue\n",
        "\n",
        "                protein_seq = self.protein_sequences[protein_id]\n",
        "                protein_length = len(protein_seq)\n",
        "                coverage = np.zeros(protein_length)\n",
        "\n",
        "                # Filter peptides\n",
        "                protein_peptides = self.peptide_data[\n",
        "                    self.peptide_data['UniProt id'] == protein_id\n",
        "                ]\n",
        "\n",
        "                if len(protein_peptides) == 0:\n",
        "                    logger.warning(f\"No peptides found for protein {protein_id}\")\n",
        "                    continue\n",
        "\n",
        "                # Process peptides\n",
        "                for _, row in protein_peptides.iterrows():\n",
        "                    try:\n",
        "                        # Validate positions\n",
        "                        self.processor.validate_peptide_positions(row, protein_length)\n",
        "\n",
        "                        start = int(row['Start position'])\n",
        "                        end = int(row['End position'])\n",
        "                        intensity = float(row.get('Intensity', 1.0))\n",
        "\n",
        "                        coverage[start:end] += intensity\n",
        "\n",
        "                        # Add peptide marker\n",
        "                        fig.add_trace(go.Scatter(\n",
        "                            x=[(start + end) / 2],\n",
        "                            y=[y_offset + coverage[start:end].max() + 0.1],\n",
        "                            mode='markers',\n",
        "                            marker=dict(size=8, color='red'),\n",
        "                            name=f\"{protein_id} Peptide\",\n",
        "                            text=f\"Peptide: {row['Peptide']}<br>\"\n",
        "                                 f\"Position: {start}-{end}<br>\"\n",
        "                                 f\"Intensity: {intensity:.2f}\",\n",
        "                            hoverinfo='text',\n",
        "                            showlegend=False\n",
        "                        ))\n",
        "\n",
        "                    except Exception as e:\n",
        "                        logger.warning(\n",
        "                            f\"Error processing peptide {row['Peptide']}: {str(e)}\"\n",
        "                        )\n",
        "                        continue\n",
        "\n",
        "                # Add coverage trace\n",
        "                fig.add_trace(go.Bar(\n",
        "                    x=list(range(protein_length)),\n",
        "                    y=coverage + y_offset,\n",
        "                    name=f\"{protein_id} Coverage\",\n",
        "                    hovertemplate=\"Position: %{x}<br>Coverage: %{y:.2f}<extra></extra>\"\n",
        "                ))\n",
        "\n",
        "                y_offset += coverage.max() + 1\n",
        "\n",
        "            if len(fig.data) == 0:\n",
        "                raise PlottingError(\"No valid data to plot\")\n",
        "\n",
        "            # Update layout\n",
        "            fig.update_layout(\n",
        "                title=\"Peptide Coverage Map\",\n",
        "                xaxis_title=\"Protein Position\",\n",
        "                yaxis_title=\"Coverage Depth\",\n",
        "                showlegend=True,\n",
        "                hovermode='closest',\n",
        "                template='plotly_white',\n",
        "                height=200 + (300 * len(selected_proteins))\n",
        "            )\n",
        "\n",
        "            return fig\n",
        "\n",
        "        except Exception as e:\n",
        "            raise PlottingError(f\"Error generating plot: {str(e)}\")\n",
        "\n",
        "# Create UI handler with error handling\n",
        "class PeptigramUI:\n",
        "    def __init__(self):\n",
        "        self.analyzer = PeptigramAnalyzer()\n",
        "        self.status_output = widgets.Output()\n",
        "        self.setup_widgets()\n",
        "\n",
        "    def setup_widgets(self):\n",
        "        \"\"\"Set up UI widgets with error handling\"\"\"\n",
        "        self.protein_select = widgets.SelectMultiple(\n",
        "            options=[],\n",
        "            description='Proteins:',\n",
        "            layout={'width': 'max-content'}\n",
        "        )\n",
        "\n",
        "        self.plot_button = widgets.Button(\n",
        "            description='Generate Plot',\n",
        "            button_style='primary'\n",
        "        )\n",
        "\n",
        "        self.plot_button.on_click(self.on_plot_click)\n",
        "\n",
        "    def show_error(self, error_msg: str, details: str = None):\n",
        "        \"\"\"Display error message in UI\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            print(f\"❌ Error: {error_msg}\")\n",
        "            if details:\n",
        "                print(\"\\nDetails:\")\n",
        "                print(details)\n",
        "\n",
        "    def show_success(self, message: str):\n",
        "        \"\"\"Display success message in UI\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "            print(f\"✅ {message}\")\n",
        "\n",
        "    def on_plot_click(self, b):\n",
        "        \"\"\"Handle plot button click with error handling\"\"\"\n",
        "        with self.status_output:\n",
        "            self.status_output.clear_output()\n",
        "\n",
        "            if not self.protein_select.value:\n",
        "                self.show_error(\"Please select at least one protein\")\n",
        "                return\n",
        "\n",
        "            try:\n",
        "                fig = self.analyzer.generate_plot(self.protein_select.value)\n",
        "                fig.show()\n",
        "                self.show_success(\"Plot generated successfully\")\n",
        "            except Exception as e:\n",
        "                self.show_error(\n",
        "                    \"Error generating plot\",\n",
        "                    f\"Type: {type(e).__name__}\\nDetails: {str(e)}\"\n",
        "                )\n",
        "\n",
        "    def process_files(self):\n",
        "        \"\"\"Process uploaded files with error handling\"\"\"\n",
        "        try:\n",
        "            print(\"Please upload your FASTA file...\")\n",
        "            uploaded_fasta = files.upload()\n",
        "            if not uploaded_fasta:\n",
        "                raise FileFormatError(\"No FASTA file uploaded\")\n",
        "\n",
        "            print(\"\\nPlease upload your peptides CSV file...\")\n",
        "            uploaded_csv = files.upload()\n",
        "            if not uploaded_csv:\n",
        "                raise FileFormatError(\"No CSV file uploaded\")\n",
        "\n",
        "            fasta_file = list(uploaded_fasta.keys())[0]\n",
        "            csv_file = list(uploaded_csv.keys())[0]\n",
        "\n",
        "            # Load files\n",
        "            print(\"\\nProcessing files...\")\n",
        "            proteins = self.analyzer.load_fasta_file(\n",
        "                StringIO(uploaded_fasta[fasta_file].decode())\n",
        "            )\n",
        "            self.show_success(f\"Loaded {len(proteins)} proteins from FASTA\")\n",
        "\n",
        "            self.analyzer.load_peptides_file(\n",
        "                StringIO(uploaded_csv[csv_file].decode())\n",
        "            )\n",
        "            self.show_success(\"Successfully loaded peptide data\")\n",
        "\n",
        "            # Update protein selection widget\n",
        "            self.protein_select.options = proteins\n",
        "\n",
        "            # Display widgets\n",
        "            display(widgets.VBox([\n",
        "                widgets.HTML(\"<b>Select proteins to visualize:</b>\"),\n",
        "                self.protein_select,\n",
        "                self.plot_button,\n",
        "                self.status_output\n",
        "            ]))\n",
        "\n",
        "        except Exception as e:\n",
        "            self.show_error(\n",
        "                \"Error processing files\",\n",
        "                f\"Type: {type(e).__name__}\\nDetails: {str(e)}\\n\\n\"\n",
        "                f\"Stack trace:\\n{traceback.format_exc()}\"\n",
        "            )\n",
        "\n",
        "# Create UI instance\n",
        "ui = PeptigramUI()\n",
        "\n",
        "print(\"To begin, type: ui.process_files()\")\n",
        "print(\"\\nMake sure your files follow this format:\")\n",
        "print(\"FASTA: >sp|UniProtID|Name\")\n",
        "print(\"CSV: Must have columns 'UniProt id', 'Peptide', 'Start position', 'End position'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "tIVEHwiZh-uo",
        "outputId": "ed1372ca-c2f6-474c-de87-49dfda660353"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'Bio'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-8917c9b2f620>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph_objects\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mBio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSeqIO\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHTML\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'Bio'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ui.process_files()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "kkuvuE2aizRT",
        "outputId": "582cee03-3767-43e6-f183-b22971d11710"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload your FASTA file...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7e091a02-4b2e-49a4-bbb9-63c92adf587d\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7e091a02-4b2e-49a4-bbb9-63c92adf587d\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving proteins.fasta to proteins (4).fasta\n",
            "\n",
            "Please upload your peptides CSV file...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-86335d45-8f66-4722-b7f0-ef4fd44d9a08\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-86335d45-8f66-4722-b7f0-ef4fd44d9a08\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving New_peptide.xlsx to New_peptide.xlsx\n",
            "\n",
            "Processing files...\n"
          ]
        }
      ]
    }
  ]
}